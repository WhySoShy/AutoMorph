using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using AutoMorph.Internal.Syntax.Providers.Enums;
using AutoMorph.Internal.Syntax.Tokens;
using Microsoft.CodeAnalysis;

namespace AutoMorph.Internal.Syntax.Providers;

internal static class SourceGenerator
{
    internal static void GenerateCode(ClassToken token, SourceProductionContext context)
    {
        // No reason to generate the actual code, if there is no methods etc. to be built.
        if (!token.Methods.Any())
            return;
        
        IndentedTextWriter writer = token.Writer;
        
        // Generate the auto generated comment, and namespace.
        writer
            .AppendAutoGeneratedComment()
            .Append("#nullable enable").AppendNewLine()
            .AppendNamespaces(token.NameSpaces).AppendNewLine(2)
            .Append($"namespace {token.Namespace}").AppendNewLine()
            .AppendFormat(FormatType.OpenCurlyBraces, IndentType.Indent) // Opens the namespace
                .AppendNewLine().GenerateSourceClass(token)
            .AppendFormat(FormatType.ClosedCurlyBraces, IndentType.Outdent); // Closes the namespace
        
        context.AddSource($"MapperFrom{token.SourceClass.Name}To{token.TargetClass.Name}.g.cs", writer.InnerWriter.ToString());
    }

    static IndentedTextWriter AppendNamespaces(this IndentedTextWriter writer, HashSet<string> usingNamespaces)
    {
        foreach (string namespaceName in usingNamespaces)
            writer.Append($"using {namespaceName};");

        return writer;
    }
}