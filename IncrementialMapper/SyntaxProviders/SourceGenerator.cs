using System.CodeDom.Compiler;
using System.Collections.Generic;
using IncrementialMapper.Syntax.Tokens;
using IncrementialMapper.SyntaxProviders.Enums;
using Microsoft.CodeAnalysis;

namespace IncrementialMapper.SyntaxProviders;

internal static class SourceGenerator
{
    public static void GenerateCode(ClassToken token, SourceProductionContext context)
    {
        IndentedTextWriter writer = token.Writer;

        // Generate the auto generated comment, and namespace.
        writer
            .AppendAutoGeneratedComment()
            .Append("#nullable enable").AppendLine()
            .AppendNamespaces(token.NameSpaces).AppendLine(2)
            .Append($"namespace {token.Namespace}").AppendLine()
            .AppendFormat(FormatType.OpenCurlyBraces, IndentType.Indent).AppendLine();

        token.CreateSourceClass();

        // Close the namespace again.
        writer.AppendFormat(FormatType.ClosedCurlyBraces, IndentType.Outdent);

        string finalString = writer.InnerWriter.ToString();
        
        context.AddSource($"MapperFrom{token.SourceClass.Name}To{token.TargetClass.Name}.g.cs", writer.InnerWriter.ToString());
    }

    private static IndentedTextWriter AppendNamespaces(this IndentedTextWriter writer, HashSet<string> usingNamespaces)
    {
        foreach (string namespaceName in usingNamespaces)
            writer.Append($"using {namespaceName};");

        return writer;
    }
}