using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using IncrementialMapper.Syntax.Tokens;
using IncrementialMapper.SyntaxProviders.Enums;
using IncrementialMapper.SyntaxProviders.Exceptions;

namespace IncrementialMapper.SyntaxProviders;

internal static class FormatProvider
{
    public const string AUTO_GENERATED_COMMENT = "/// <auto-generated />";
    public const string NAMESPACE = "IncrementialMapper.Generated.Mappers";

    // Keeps track of the indentation levels, and the type of indentation.
    private static Dictionary<int, FormatType> _indentation = [];

    public static IndentedTextWriter AppendFormat(this IndentedTextWriter writer, FormatType formatType, IndentType indentationType)
    {
        if (!_indentation.Any() && formatType is FormatType.ClosedParentheses or FormatType.ClosedCurlyBraces)
            throw new FormatException("Cannot close, because no opening was made.");

        if (indentationType is IndentType.Outdent)
            writer.Indent--;
        
        writer.Write((char)formatType);
        
        if (indentationType is IndentType.Indent)
            writer.Indent++;
        
        _indentation.TryAdd(writer.Indent, formatType);
        
        return writer;
    }

    public static IndentedTextWriter AppendAutoGeneratedComment(this IndentedTextWriter writer)
    {
        return writer
                .Append(AUTO_GENERATED_COMMENT)
                .AppendLine();
    }
    
    public static IndentedTextWriter AppendNamespace(this IndentedTextWriter writer, ClassToken classToken)
    {
        // TODO: Append namespace of source class if it is marked as a partial class.
        return writer
                .Append($"namespace {NAMESPACE}")
                .AppendLine()
                .AppendFormat(FormatType.OpenCurlyBraces, IndentType.Indent);
    }

    /// <summary>
    /// Appends into a new line.
    /// </summary>
    public static IndentedTextWriter AppendLine(this IndentedTextWriter writer)
    {
        writer.WriteLine();
        return writer;
    }

    public static IndentedTextWriter Append(this IndentedTextWriter writer, string text)
    {
        writer.Write(text);
        return writer;
    }
}
